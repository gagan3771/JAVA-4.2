import java.util.*;
import java.util.stream.*;

class Product {
    String name;
    double price;
    String category;

    public Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String getCategory() {
        return category;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "Product{name='" + name + "', price=" + price + ", category='" + category + "'}";
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", 1000, "Electronics"),
            new Product("Smartphone", 800, "Electronics"),
            new Product("Shirt", 50, "Apparel"),
            new Product("Jeans", 60, "Apparel")
        );

        // Group products by category
        Map<String, List<Product>> groupedByCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));

        System.out.println("Products grouped by category:");
        groupedByCategory.forEach((category, productList) -> {
            System.out.println(category + ": " + productList);
        });

        // Find the most expensive product in each category
        System.out.println("\nMost expensive product in each category:");
        groupedByCategory.forEach((category, productList) -> {
            productList.stream()
                    .max(Comparator.comparingDouble(Product::getPrice))
                    .ifPresent(product -> System.out.println(category + ": " + product));
        });

        // Calculate the average price of all products
        double averagePrice = products.stream()
                .collect(Collectors.averagingDouble(Product::getPrice));

        System.out.println("\nAverage price of all products: " + averagePrice);
    }
}
